/* codecore.vapi generated by valac 0.40.15, do not modify. */

namespace Scratch {
	namespace Dialogs {
		[CCode (cheader_filename = "codecore.h")]
		public class Preferences : Gtk.Dialog {
			public Preferences (Gtk.Window? parent, Scratch.Services.PluginsManager plugins);
		}
	}
	namespace FolderManager {
	}
	namespace Services {
		[CCode (cheader_filename = "codecore.h")]
		public class Document : Granite.Widgets.Tab {
			public delegate void VoidFunc ();
			public Gtk.Stack main_stack;
			public string original_content;
			public Code.Pane pane;
			public bool saved;
			public Scratch.Widgets.SourceView source_view;
			public Document (GLib.SimpleActionGroup actions, GLib.File? file = null);
			public bool can_write ();
			public void check_file_status ();
			public void check_undoable_actions ();
			public bool do_close (bool app_closing = false);
			public void duplicate_selection ();
			public bool exists (GLib.Cancellable? cancellable = null);
			public new void focus ();
			public string get_basename ();
			public string get_language_id ();
			public string get_language_name ();
			public string get_selected_text ();
			public string get_text ();
			public string get_uri ();
			public void hide_info_bar ();
			public bool move (GLib.File new_dest);
			public async void open (bool force = false);
			public void redo ();
			public void revert ();
			public async bool save (bool force = false);
			public async bool save_as ();
			public bool save_as_with_hold ();
			public bool save_with_hold (bool force = false);
			public void set_message (Gtk.MessageType type, string label, string? button1 = null, owned Scratch.Services.Document.VoidFunc? callback1 = null, string? button2 = null, owned Scratch.Services.Document.VoidFunc? callback2 = null);
			public void set_saved_status (bool val);
			public void toggle_changed_handlers (bool enabled);
			public void undo ();
			public GLib.SimpleActionGroup actions { get; set; }
			public GLib.File file { get; set; }
			public bool is_file_temporary { get; }
			public string? mime_type { get; }
			public signal void doc_closed ();
			public signal void doc_opened ();
			public signal void doc_saved ();
		}
		[CCode (cheader_filename = "codecore.h")]
		public class FileHandler : GLib.Object {
			public FileHandler ();
			public static bool copy (string path, string new_path);
			public static async string? load_content_from_file (GLib.File file);
			public static string? load_content_from_file_sync (GLib.File file);
			public static bool move (string path, string new_path);
			public static bool move_uri (string uri, string new_uri);
		}
		[CCode (cheader_filename = "codecore.h")]
		public class Interface : GLib.Object {
			public Scratch.Services.PluginsManager manager;
			public Interface (Scratch.Services.PluginsManager manager);
			public void close_document (Scratch.Services.Document doc);
			public Scratch.Services.Document open_file (GLib.File file);
			public Scratch.TemplateManager template_manager { get; private set; }
			public signal void hook_document (Scratch.Services.Document doc);
			public signal void hook_notebook_bottom (Gtk.Notebook notebook);
			public signal void hook_notebook_sidebar (Gtk.Notebook notebook);
			public signal void hook_preferences_dialog (Scratch.Dialogs.Preferences dialog);
			public signal void hook_share_menu (Gtk.Menu menu);
			public signal void hook_split_view (Scratch.Widgets.SplitView view);
			public signal void hook_toolbar (Scratch.Widgets.HeaderBar toolbar);
			public signal void hook_window (Scratch.MainWindow window);
		}
		[CCode (cheader_filename = "codecore.h")]
		public class PluginsManager : GLib.Object {
			public weak Scratch.MainWindow window;
			public PluginsManager (Scratch.MainWindow window, string? set_name = null);
			public Gtk.Widget get_view ();
			public Scratch.Services.Interface plugin_iface { get; private set; }
			public signal void extension_added (Peas.PluginInfo info);
			public signal void extension_removed (Peas.PluginInfo info);
			public signal void hook_document (Scratch.Services.Document doc);
			public signal void hook_notebook_bottom (Gtk.Notebook notebook);
			public signal void hook_preferences_dialog (Scratch.Dialogs.Preferences dialog);
			public signal void hook_share_menu (Gtk.Menu menu);
			public signal void hook_split_view (Scratch.Widgets.SplitView view);
			public signal void hook_toolbar (Scratch.Widgets.HeaderBar toolbar);
			public signal void hook_window (Scratch.MainWindow window);
		}
		[CCode (cheader_filename = "codecore.h")]
		public class ZeitgeistLogger {
			public string actor;
			public string event_manifestation;
			public ZeitgeistLogger ();
			public void close_insert (string? uri, string mimetype);
			public void move_insert (string old_uri, string new_uri, string mimetype);
			public void open_insert (string? uri, string mimetype);
			public void save_insert (string uri, string mimetype);
		}
		[CCode (cheader_filename = "codecore.h")]
		public enum DocumentStates {
			NORMAL,
			READONLY
		}
		[CCode (cheader_filename = "codecore.h")]
		public enum FileOption {
			EXISTS,
			IS_DIR,
			IS_EXECUTABLE
		}
	}
	namespace Utils {
		[CCode (cheader_filename = "codecore.h")]
		public static string? last_path;
		[CCode (cheader_filename = "codecore.h")]
		public static GLib.SimpleAction action_from_group (string action_name, GLib.SimpleActionGroup action_group);
	}
	namespace Widgets {
		[CCode (cheader_filename = "codecore.h")]
		public class DocumentView : Granite.Widgets.DynamicNotebook {
			public GLib.List<Scratch.Services.Document> docs;
			public bool is_closing;
			public uint view_id;
			public DocumentView (Scratch.MainWindow window);
			public void close_current_document ();
			public void close_document (Scratch.Services.Document doc);
			public void duplicate_document (Scratch.Services.Document original);
			public new void focus ();
			public bool is_empty ();
			public void new_document ();
			public void new_document_from_clipboard (string clipboard);
			public void next_document ();
			public void open_document (Scratch.Services.Document doc, bool focus = true);
			public void previous_document ();
			public void save_current_file (Scratch.Services.Document? current_document);
			public void save_opened_files ();
			public Scratch.Services.Document current_document { get; set; }
			public Scratch.MainWindow window { get; set construct; }
			public signal void document_change (Scratch.Services.Document? document, Scratch.Widgets.DocumentView parent);
			public signal void empty ();
		}
		[CCode (cheader_filename = "codecore.h")]
		public class HeaderBar : Gtk.HeaderBar {
			public Gtk.MenuButton app_menu;
			public Gtk.ToggleButton find_button;
			public Code.FormatBar format_bar;
			public Gtk.MenuButton share_app_menu;
			public Gtk.Menu share_menu;
			public Gtk.Button templates_button;
			public HeaderBar ();
			public void document_available (bool has_document);
			public void set_document_focus (Scratch.Services.Document doc);
		}
		[CCode (cheader_filename = "codecore.h")]
		public class SearchBar : Gtk.FlowBox {
			public Gtk.SearchEntry replace_entry;
			public Gtk.SearchEntry search_entry;
			public SearchBar (Scratch.MainWindow window);
			public void highlight_none ();
			public bool search ();
			public void search_next ();
			public void search_previous ();
			public void set_search_string (string to_search);
			public void set_text_view (Scratch.Widgets.SourceView? text_view);
			public Scratch.MainWindow window { get; construct; }
			public signal void need_hide ();
		}
		[CCode (cheader_filename = "codecore.h")]
		public class SourceView : Gtk.SourceView {
			public Gtk.TextTag error_tag;
			public Gtk.SourceLanguageManager manager;
			public Gtk.TextMark mark;
			public Gtk.SourceStyleSchemeManager style_scheme_manager;
			public Gtk.TextTag warning_tag;
			public SourceView ();
			public void change_syntax_highlight_from_file (GLib.File file);
			public void duplicate_selection ();
			public string get_selected_text (bool replace_new_line = true);
			public string get_text ();
			public void go_to_line (int line, int offset = 0);
			public void set_text (string text, bool opening = true);
			public void sort_selected_lines ();
			public void use_default_font (bool value);
			public Gtk.SourceLanguage? language { get; set; }
			public signal void deselected ();
			public signal void selection_changed (Gtk.TextIter start_iter, Gtk.TextIter end_iter);
			public signal void style_changed (Gtk.SourceStyleScheme style);
		}
		[CCode (cheader_filename = "codecore.h")]
		public class SplitView : Granite.Widgets.CollapsiblePaned {
			public Scratch.Widgets.DocumentView? current_view;
			public GLib.List<Scratch.Widgets.DocumentView> views;
			public SplitView (Scratch.MainWindow window);
			public Scratch.Widgets.DocumentView? add_view ();
			public Scratch.Widgets.DocumentView? get_current_view ();
			public void hide_welcome ();
			public bool is_empty ();
			public void remove_view (Scratch.Widgets.DocumentView? view = null);
			public void show_welcome ();
			public Scratch.MainWindow window { get; set construct; }
			public signal void document_change (Scratch.Services.Document document);
			public signal void views_changed (uint count);
			public signal void welcome_hidden ();
			public signal void welcome_shown ();
		}
	}
	[CCode (cheader_filename = "codecore.h")]
	public class Application : Gtk.Application {
		public static Scratch.Application _instance;
		public Application ();
		protected override void activate ();
		protected override int command_line (GLib.ApplicationCommandLine command_line);
		public Scratch.MainWindow? get_last_window ();
		public override bool local_command_line (ref unowned string[] arguments, out int exit_status);
		public static int main (string[] args);
		public Scratch.MainWindow new_window ();
		protected override void open (GLib.File[] files, string hint);
		public string app_cmd_name { get; }
		public string data_home_folder_unsaved { get; }
		public string default_font { get; set; }
		public static Scratch.Application instance { get; }
	}
	[CCode (cheader_filename = "codecore.h")]
	public class CommentToggler {
		public CommentToggler ();
		public static bool language_has_comments (Gtk.SourceLanguage? lang);
		public static void toggle_comment (Gtk.SourceBuffer? buffer);
	}
	[CCode (cheader_filename = "codecore.h")]
	public class FolderManagerSettings : Granite.Services.Settings {
		public FolderManagerSettings ();
		public string[] opened_folders { get; set; }
	}
	[CCode (cheader_filename = "codecore.h")]
	public class MainWindow : Gtk.Window {
		public int FONT_SIZE_MAX;
		public int FONT_SIZE_MIN;
		public static Gee.MultiMap<string,string> action_accelerators;
		public Gtk.Notebook bottombar;
		public Gtk.Clipboard clipboard;
		public Code.Pane project_pane;
		public Scratch.Widgets.SearchBar search_bar;
		public Scratch.Widgets.SplitView split_view;
		public Scratch.Widgets.HeaderBar toolbar;
		public const string ACTION_DUPLICATE;
		public const string ACTION_FIND;
		public const string ACTION_FIND_NEXT;
		public const string ACTION_FIND_PREVIOUS;
		public const string ACTION_FULLSCREEN;
		public const string ACTION_GO_TO;
		public const string ACTION_NEW_FROM_CLIPBOARD;
		public const string ACTION_NEW_TAB;
		public const string ACTION_NEW_VIEW;
		public const string ACTION_OPEN;
		public const string ACTION_OPEN_FOLDER;
		public const string ACTION_PREFERENCES;
		public const string ACTION_PREFIX;
		public const string ACTION_QUIT;
		public const string ACTION_REDO;
		public const string ACTION_REMOVE_VIEW;
		public const string ACTION_REVERT;
		public const string ACTION_SAVE;
		public const string ACTION_SAVE_AS;
		public const string ACTION_SHOW_FIND;
		public const string ACTION_SHOW_REPLACE;
		public const string ACTION_SORT_LINES;
		public const string ACTION_TEMPLATES;
		public const string ACTION_TOGGLE_COMMENT;
		public const string ACTION_TOGGLE_SIDEBAR;
		public const string ACTION_TO_LOWER_CASE;
		public const string ACTION_TO_UPPER_CASE;
		public const string ACTION_UNDO;
		public const string ACTION_ZOOM_DEFAULT;
		public const string ACTION_ZOOM_IN;
		public const string ACTION_ZOOM_OUT;
		public MainWindow (Scratch.Application scratch_app);
		public void action_zoom_in ();
		public void action_zoom_out ();
		public Scratch.Widgets.DocumentView? add_view ();
		public void close_document (Scratch.Services.Document doc);
		protected override bool delete_event (Gdk.EventAny event);
		public Scratch.Services.Document? get_current_document ();
		public string get_current_font ();
		public double get_current_font_size ();
		public Scratch.Widgets.DocumentView? get_current_view ();
		public string get_default_font ();
		public double get_default_font_size ();
		public Scratch.Services.Document? get_focused_document ();
		public bool has_temporary_files ();
		public bool is_empty ();
		public void open_document (Scratch.Services.Document doc, Scratch.Widgets.DocumentView? view_ = null, bool focus = true);
		public void open_folder (GLib.File folder);
		public bool quit_source_func ();
		public void restore_opened_documents ();
		public void set_default_zoom ();
		public GLib.SimpleActionGroup actions { get; construct; }
		public Scratch.Application app { get; construct; }
	}
	[CCode (cheader_filename = "codecore.h")]
	public class SavedState : Granite.Services.Settings {
		public SavedState ();
		public int hp1_size { get; set; }
		public int vp_size { get; set; }
		public int window_height { get; set; }
		public Scratch.ScratchWindowState window_state { get; set; }
		public int window_width { get; set; }
		public int window_x { get; set; }
		public int window_y { get; set; }
	}
	[CCode (cheader_filename = "codecore.h")]
	public class ServicesSettings : Granite.Services.Settings {
		public ServicesSettings ();
		public string expiry_time { get; set; }
		public string paste_format_code { get; set; }
		public bool set_private { get; set; }
	}
	[CCode (cheader_filename = "codecore.h")]
	public class Settings : Granite.Services.Settings {
		public Settings ();
		public bool auto_indent { get; set; }
		public bool autosave { get; set; }
		public Scratch.ScratchDrawSpacesState draw_spaces { get; set; }
		public string focused_document_view1 { get; set; }
		public string focused_document_view2 { get; set; }
		public string font { get; set; }
		public bool highlight_matching_brackets { get; set; }
		public int indent_width { get; set; }
		public bool line_wrap { get; set; }
		public string[] opened_files_view1 { get; set; }
		public string[] opened_files_view2 { get; set; }
		public string[] plugins_enabled { get; set; }
		public bool prefer_dark_style { get; set; }
		public int right_margin_position { get; set; }
		public bool show_mini_map { get; set; }
		public bool show_right_margin { get; set; }
		public bool spaces_instead_of_tabs { get; set; }
		public string style_scheme { get; set; }
		public bool use_system_font { get; set; }
	}
	[CCode (cheader_filename = "codecore.h")]
	public abstract class Template : GLib.Object {
		protected Template ();
		public static void configure_template (string origin, string destination, Gee.HashMap<string,string> variables);
		public static void enumerate_directory (GLib.File origin, Gee.TreeSet<GLib.FileInfo> files, Gee.TreeSet<GLib.File> directories);
		public abstract Gtk.Widget get_creation_box ();
		public static void info_directory (GLib.File file, out bool is_directory, out bool exists);
		public signal void loaded (GLib.File file);
	}
	[CCode (cheader_filename = "codecore.h")]
	public class TemplateManager : GLib.Object {
		public bool template_available;
		public TemplateManager ();
		public void register_template (string icon_id, string label, string description, GLib.Type template_type);
		public void show_window (Gtk.Widget? parent);
		public signal void template_loaded (Scratch.Template template, GLib.File file);
	}
	[CCode (cheader_filename = "codecore.h")]
	public class TestTemplate : Scratch.Template {
		public TestTemplate ();
		public override Gtk.Widget get_creation_box ();
	}
	[CCode (cheader_filename = "codecore.h")]
	public enum ScratchDrawSpacesState {
		NEVER,
		FOR_SELECTION,
		ALWAYS
	}
	[CCode (cheader_filename = "codecore.h")]
	public enum ScratchWindowState {
		NORMAL,
		MAXIMIZED,
		FULLSCREEN
	}
	[CCode (cheader_filename = "codecore.h")]
	public static Scratch.SavedState saved_state;
	[CCode (cheader_filename = "codecore.h")]
	public static Scratch.ServicesSettings services;
	[CCode (cheader_filename = "codecore.h")]
	public static Scratch.Settings settings;
}
namespace Code {
	[CCode (cheader_filename = "codecore.h")]
	public class FormatBar : Gtk.Grid {
		public class FormatButton : Gtk.ToggleButton {
			public FormatButton ();
			public GLib.Icon? icon { owned get; set; }
			public string text { set; }
		}
		public class LangEntry : Gtk.ListBoxRow {
			public LangEntry (string? lang_id, string lang_name, GLib.SList<Gtk.RadioButton> group);
			public unowned GLib.SList<Gtk.RadioButton> get_radio_group ();
			public bool active { get; set; }
			public string? lang_id { get; construct; }
			public string lang_name { get; construct; }
			public bool selected { get; set; }
		}
		public Code.FormatBar.FormatButton line_toggle;
		public FormatBar ();
		public void set_document (Scratch.Services.Document doc);
	}
	[CCode (cheader_filename = "codecore.h")]
	public class Pane : Gtk.Grid {
		public Pane ();
		public void add_tab (Code.PaneSwitcher tab);
		public Gtk.Stack stack { get; private set; }
	}
	[CCode (cheader_filename = "codecore.h")]
	public class WelcomeView : Granite.Widgets.Welcome {
		public WelcomeView (Scratch.MainWindow window);
		public Scratch.MainWindow window { get; construct; }
	}
	[CCode (cheader_filename = "codecore.h")]
	public interface PaneSwitcher : Gtk.Widget {
		public abstract string icon_name { get; set; }
		public abstract string title { get; set; }
	}
}
namespace Constants {
	[CCode (cheader_filename = "codecore.h")]
	public const string DATADIR;
	[CCode (cheader_filename = "codecore.h")]
	public const string GETTEXT_PACKAGE;
	[CCode (cheader_filename = "codecore.h")]
	public const string INSTALL_PREFIX;
	[CCode (cheader_filename = "codecore.h")]
	public const string PLUGINDIR;
	[CCode (cheader_filename = "codecore.h")]
	public const string PROJECT_NAME;
	[CCode (cheader_filename = "codecore.h")]
	public const string VERSION;
}
[CCode (cheader_filename = "codecore.h")]
public class ContractMenuItem : Gtk.MenuItem {
	public ContractMenuItem (Granite.Services.Contract contract, GLib.File file);
	public override void activate ();
}
[CCode (cheader_filename = "codecore.h")]
public class TemplateButton : Gtk.Button {
	public TemplateButton (string title, string description, string icon);
	public void set_icon_from_pixbuf (Gdk.Pixbuf pixbuf);
}
